version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ecommerce
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: ecommerce-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network

  # Elasticsearch for Search Service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ecommerce-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ecommerce-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecommerce-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: ecommerce-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - ecommerce-network

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: ecommerce-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - ecommerce-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: ecommerce-auth-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key
    depends_on:
      - mongodb
      - redis
    networks:
      - ecommerce-network

  # Catalog Service
  catalog-service:
    build:
      context: ./services/catalog-service
      dockerfile: Dockerfile
    container_name: ecommerce-catalog-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: password123
    depends_on:
      - mongodb
      - minio
    networks:
      - ecommerce-network

  # Inventory Service
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    container_name: ecommerce-inventory-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - ecommerce-network

  # Cart Service
  cart-service:
    build:
      context: ./services/cart-service
      dockerfile: Dockerfile
    container_name: ecommerce-cart-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
    depends_on:
      - redis
      - rabbitmq
    networks:
      - ecommerce-network

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - ecommerce-network

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: ecommerce-payment-service
    restart: unless-stopped
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
      STRIPE_SECRET_KEY: sk_test_your_stripe_key
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - ecommerce-network

  # Shipping Service
  shipping-service:
    build:
      context: ./services/shipping-service
      dockerfile: Dockerfile
    container_name: ecommerce-shipping-service
    restart: unless-stopped
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: development
      PORT: 3007
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - ecommerce-network

  # Search Service
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
    container_name: ecommerce-search-service
    restart: unless-stopped
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: development
      PORT: 3008
      ELASTICSEARCH_URL: http://elasticsearch:9200
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
    depends_on:
      - elasticsearch
      - rabbitmq
    networks:
      - ecommerce-network

  # Review Service
  review-service:
    build:
      context: ./services/review-service
      dockerfile: Dockerfile
    container_name: ecommerce-review-service
    restart: unless-stopped
    ports:
      - "3009:3009"
    environment:
      NODE_ENV: development
      PORT: 3009
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - ecommerce-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: ecommerce-notification-service
    restart: unless-stopped
    ports:
      - "3010:3010"
    environment:
      NODE_ENV: development
      PORT: 3010
      MONGODB_URI: mongodb://admin:password123@mongodb:27017
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:password123@rabbitmq:5672
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - ecommerce-network

volumes:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:
  minio_data:

networks:
  ecommerce-network:
    driver: bridge
